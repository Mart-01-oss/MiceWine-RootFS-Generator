name: Build and Release MiceWine RootFS

on:
  push:
    branches: "*"
  workflow_dispatch:

jobs:
  build:

    runs-on: self-hosted

    steps:

    - name: "Checkout Repository"
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: "Download Latest Release Rat Packages"
      run: |
        # Download the zip file to the current working directory (repository root)
        curl -LO# https://github.com/KreitinnSoftware/MiceWine-RootFS-Generator/releases/download/$(curl -s https://api.github.com/repos/KreitinnSoftware/MiceWine-RootFS-Generator/releases | grep tag_name -m 1 | cut -d ":" -f 2 | sed "s/\"//g" | sed "s/,//g" | sed "s/ //g")/MiceWine-Packages.zip || true
        
        # Create the built-pkgs directory if it doesn't exist
        mkdir -p built-pkgs
        
        # Unzip the packages into the built-pkgs directory
        unzip -o MiceWine-Packages.zip -d built-pkgs || true
        
        # Clean up the downloaded zip file
        rm -f MiceWine-Packages.zip
        
    - name: "Start Building (aarch64)"
      run: |
        # Execute the build script directly from the repository root
        ./build-all.sh aarch64 --ci
        
        # Check if the 'logs' directory was created by the build script
        if [ -d "logs" ]; then
          # Change into the logs directory to create the archive
          cd logs
          # Create the log zip file one level up (in the repository root)
          7z a ../MiceWine-RootFS-$(git rev-parse --short HEAD)-aarch64-Logs.zip
          # Change back to the repository root
          cd .. 
        else
          echo "Logs directory not found. Skipping log archiving."
        fi

    - name: "Create RootFS File (aarch64)"
      run: |
        # Execute the rootfs creation script directly from the repository root
        ./create-rootfs-rat.sh aarch64
        # Assuming create-rootfs-rat.sh generates the .rat file directly in the current working directory
        # with the name MiceWine-RootFS-$(git rev-parse --short HEAD)-aarch64.rat.
        # No 'mv' command is needed if the file is created with the correct name in the current directory.

    - name: "Save Rat Packages"
      run: |
        # Check if the 'built-pkgs' directory exists
        if [ -d "built-pkgs" ]; then
          # Change into the built-pkgs directory
          cd built-pkgs
          # Create the packages zip file one level up (in the repository root)
          7z a ../MiceWine-Packages.zip
          # Change back to the repository root
          cd .. 
        else
          echo "built-pkgs directory not found. Skipping package archiving."
        fi

    - name: "Get Short SHA"
      run: |
        echo "SHORT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

    - name: "Create Release"
      uses: softprops/action-gh-release@v1
      with:
        name: "MiceWine RootFS (${{ env.SHORT_SHA }})"
        tag_name: ${{ env.SHORT_SHA }}
        prerelease: true
        files: |
          # Attach all .rat and .zip files found in the repository root
          *.rat
          *.zip
